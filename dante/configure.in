AC_INIT(include/socks.h)

#set this to enable prerelease, changes some defaults (debug enabled)
prerelease="1"
if test x$prerelease != x; then
	prename="-pre$prerelease"
else
	prename=""
fi

AM_INIT_AUTOMAKE(dante, 0.92.0$prename)
AM_CONFIG_HEADER(include/autoconf.h)
#XXX save CFLAGS; wish to compile without -O2 when debugging
oCFLAGS=$CFLAGS
AM_PROG_LIBTOOL

AC_CANONICAL_HOST

AM_CONDITIONAL(PRERELEASE, test x$prerelease != x)

#XXX generic
case $host in
	*-*-*bsd*)
		#XXX add proper test for this?
		no_acceptlock=t
	;;
	*-*-solaris2.6)
		#XXX add proper test for this?
		no_acceptlock=t
	;;
esac

case $host in

	*-*-sunos4*)
		#XXX hardcode library path (find better way to do this?)
		AC_DEFINE(LIBRARY_PATH, "/usr/lib/")
		base_library_path="/usr/lib/"
		AC_MSG_WARN("notice: hardcoding /usr/lib for dlopen")
		#nonstandard libfunction workaround #XXX proper test
		AC_DEFINE(HAVE_BROKEN_VSPRINTF)
	;;

	*-*-solaris*)
		AC_DEFINE(HAVE_SENDMSG_DEADLOCK)
		AC_DEFINE(HAVE_SOLARIS_BUGS)
	;;

#	*-*-solaris2.6)
#		#XXX won't ever get here
#		#XXX add proper test for this?
#		no_acceptlock=t
#	;;

	*-*-linux-*) # XXX This might only concern 2.0.x kernels (add test?)
		AC_DEFINE(HAVE_DEFECT_RECVMSG)
		AC_DEFINE(HAVE_LINUX_BUGS)
	;;

	*-*-openbsd*) #static sockd when profiling is enabled
		no_dynamic_profiled_sockd=t
	;;
esac

#define with hosttype
AC_DEFINE_UNQUOTED(HAVE_HOST_TYPE, "$host")

#XXX add proper test for this?
if test x$no_acceptlock != xt; then
	AC_DEFINE(NEED_ACCEPTLOCK)
fi

AC_MSG_CHECKING(for compilation with debugging)
AC_ARG_ENABLE(debug,
[  --enable-debug          compile with debugging support], 
	debug_enabled=t,
	[if test x$prerelease != x; then 
	   debug_enabled=t
	 fi])

if test x$debug_enabled = xt; then
    #no optimalization wanted
    if test $ac_cv_prog_cc_g = yes; then
	CFLAGS="$oCFLAGS -g"
    else
	CFLAGS=$oCFLAGS
    fi
    CPPFLAGS="-DDEBUG $CPPFLAGS"
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi

#-Wall ?
AC_MSG_CHECKING(for compilation with warnings)
AC_ARG_ENABLE(warnings,
[  --enable-warnings       show compilation warnings], 
	[enable_warnings=t],
	[if test x$prerelease != x; then
	    enable_warnings=t
	 fi])
if test x$enable_warning; then
    CFLAGS="-Wall $CFLAGS"
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi

#-DDIAGNOSTICS?
AC_MSG_CHECKING(for compliation with DIAGNOSTIC)
AC_ARG_ENABLE(diagnostic,
[  --enable-diagnostic     enable diagnostic], 
	[AC_DEFINE(DIAGNOSTIC)
	 AC_MSG_RESULT(yes)],
	[if test x$prerelease != x; then
	      AC_DEFINE(DIAGNOSTIC)
	      AC_MSG_RESULT(yes)
	 else
	      AC_MSG_RESULT(no)
	 fi])

AC_ARG_ENABLE(profiling,
[  --enable-profiling      compile with profiling support in server],
	s_profiling=t)
AM_CONDITIONAL(SPROFIL, test x$s_profiling = xt)
#static or dynamic sockd?
AM_CONDITIONAL(STATIC_SOCKD, test x$no_dynamic_profiled_sockd = xt)
if test x$no_dynamic_profiled_sockd = xt; then
	AC_MSG_WARN(sockd is built static when profiling is enabled)
fi

AC_ARG_ENABLE(linting,
[  --enable-linting        enable lint],
	s_linting=t)
AM_CONDITIONAL(LINT, test x$s_linting = xt)

AC_MSG_CHECKING(whether libwrap should be disabled)
AC_ARG_ENABLE(libwrap,
[  --disable-libwrap	  never use libwrap, even if it is available],
[if test x$enableval = xno; then 
	no_libwrap=t
	AC_MSG_RESULT(yes)
else
	AC_MSG_RESULT(no)
fi], AC_MSG_RESULT(no))

dnl Checks for programs.
AC_PROG_YACC
AM_PROG_LEX
dnl Checking variable sizes
		      
AC_CHECK_SIZEOF(char) 
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(int)  
AC_CHECK_SIZEOF(long) 

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(fcntl.h limits.h malloc.h paths.h strings.h syslog.h unistd.h crypt.h sys/file.h sys/ioctl.h sys/time.h sys/file.h)

#build without support for preloading?
AC_MSG_CHECKING(whether preloading should be disabled)
AC_ARG_ENABLE(preload,
[  --disable-preload       disable support for preloading shared libraries],
[if test x$enableval = xno; then
	no_preload=t
	AC_MSG_RESULT(yes)
else
	AC_MSG_RESULT(no)
fi], AC_MSG_RESULT(no))

# SOCKSLIBRARY_DYNAMIC is set in the lib directory when preloading
# is supported (and requested).
# HAVE_DLFCN_H only determines if the include file exists
AC_CHECK_HEADER(dlfcn.h, 
[have_dlfcn_h=t
 AC_DEFINE(HAVE_DLFCN_H)])

if test x$have_dlfcn_h = xt; then
	build_preload_lib=t #create symbolic links in dlib
fi
#XXX only set conditional if building of shared libraries are enabled
AM_CONDITIONAL(BUILD_PRELOAD_LIB, test x$have_dlfcn_h = xt)

AC_CHECK_HEADER(sys/sockio.h,
[have_sys_sockio_h=t
 AC_DEFINE(HAVE_SYS_SOCKIO_H)])

dnl Checks for typedefs, structures, and compiler characteristics.
AC_MSG_CHECKING(whether <sys/types.h> defines const)
AC_EGREP_CPP(yes,[
#include <sys/types.h>
#ifdef const
yes
#endif
], AC_MSG_RESULT(yes), [check_const="yes" AC_MSG_RESULT(no)])
if test x$check_const = xyes; then
AC_C_CONST
fi

AC_MSG_CHECKING(whether <sys/types.h> defines inline)
AC_EGREP_CPP(yes,[
#include <sys/types.h>
#ifdef inline
yes
#endif
], AC_MSG_RESULT(yes), [check_inline="yes" AC_MSG_RESULT(no)])
if test x$check_inline="yes";then
AC_C_INLINE
fi

#XXX it would perhaps be better to be consistent and use
#/usr/ucbinclude always?
#XXX not sure if the test is that good either, the problem
#surfaced when FIOASYNC was missing
AC_MSG_CHECKING(if /usr/ucbinclude/sys/ioctl.h should be used)
AC_EGREP_CPP(yes,[
#include <sys/types.h>
#include <sys/ioctl.h>
#ifdef FIOASYNC
yes
#endif
], [AC_MSG_RESULT(no)],
   [check_ucbinclude="yes"])

if test x$check_ucbinclude = xyes; then
AC_EGREP_CPP(yes,[
#include <sys/types.h>
#include "/usr/ucbinclude/sys/ioctl.h"
#ifdef FIOASYNC
yes
#endif
], [AC_MSG_RESULT(yes)
    AC_DEFINE(NEED_UCBINCLUDE_SYS_IOCTL)],
   [AC_MSG_WARN(FIOASYNC not found in <sys/ioctl.h>, program might not compile)])
fi

AC_TYPE_UID_T
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_STRUCT_ST_BLKSIZE
AC_HEADER_TIME
AC_STRUCT_TM
AC_STRUCT_TIMEZONE

AC_MSG_CHECKING(to see if openlog accepts LOG_PERROR)
AC_EGREP_CPP(yes, [
#include <syslog.h>
#ifdef LOG_PERROR
yes
#endif
], [AC_DEFINE(HAVE_OPENLOG_LOG_PERROR) AC_MSG_RESULT(yes)], AC_MSG_RESULT(no))

AC_MSG_CHECKING(to see if stdlib.h defines EXIT_FAILURE)
AC_EGREP_CPP(yes, [
#include <stdlib.h>
#ifdef EXIT_FAILURE
yes
#endif
], AC_MSG_RESULT(yes), [AC_DEFINE(NEED_EXIT_FAILURE) AC_MSG_RESULT(no)])

#XXX actually checks if AF_UNIX should be used instead of AF_LOCAL
AC_MSG_CHECKING(whether <sys/socket.h> uses AF_UNIX)
AC_EGREP_CPP(yes, [
#include <sys/types.h>
#include <sys/socket.h>
#ifdef AF_LOCAL
#else
#ifdef AF_UNIX
yes
#endif
#endif
], [AC_DEFINE(NEED_AF_LOCAL) AC_MSG_RESULT(yes)], AC_MSG_RESULT(no))

AC_MSG_CHECKING(for SIGINFO)
AC_EGREP_CPP(yes, [
#include <signal.h>
#ifdef SIGINFO
yes
#endif
], AC_DEFINE(HAVE_SIGNAL_SIGINFO) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))


AC_MSG_CHECKING(to see if MSG_WAITALL exists)
AC_EGREP_CPP(yes,[
#include <sys/socket.h>
#ifdef MSG_WAITALL
yes
#endif
], [AC_DEFINE(HAVE_MSG_WAITALL) AC_MSG_RESULT(yes)], AC_MSG_RESULT(no))

#SO_SNDLOWAT 
AC_MSG_CHECKING(whether a working SO_SNDLOWAT exists)
case $host in
	*-*-solaris2.5*)
		#doesn't seem to work very well in 2.5.1
		AC_MSG_RESULT(no)
	;;
	*-*-solaris2.6)
		#not supported in solaris2.6, but define exists
		AC_MSG_RESULT(no)
	;;
	*)
AC_EGREP_CPP(yes,[
#include <sys/socket.h>
#ifdef SO_SNDLOWAT
yes
#endif
], [AC_DEFINE(HAVE_SO_SNDLOWAT) AC_MSG_RESULT(yes)],
[AC_MSG_RESULT(no)
 AC_MSG_WARN(performance in the server might be degraded without support for the SO_SNDLOWAT socket option)])
esac

AC_MSG_CHECKING(whether realloc with a NULL pointer calls malloc)
AC_TRY_RUN([
#include <stdlib.h>

int main(void)
{
	/* will assume this test doesn\'t fail because of lack of memory */
	if (realloc(NULL, 1) == NULL)
		return 1;
	else
		return 0;
}], AC_MSG_RESULT(yes), [AC_DEFINE(HAVE_NOMALLOC_REALLOC) AC_MSG_RESULT(no)])

AC_MSG_CHECKING(getsockopt param 4 pointer type)
AC_TRY_COMPILE([
#include <sys/types.h>
#include <sys/socket.h>
], [int getsockopt(int s, int level, int optname, void *optval, int *optlen);
int main() {return(0);}
], AC_MSG_RESULT(void), 
[AC_DEFINE(NEED_GETSOCKOPT_CAST) AC_MSG_RESULT(char)])

AC_MSG_CHECKING(to see if bind prototype lacks const)
AC_TRY_COMPILE([
#include <sys/types.h>
#include <sys/socket.h>
], [int bind(int s, struct sockaddr *name, int namelen);
int main(){return(0);}
], AC_DEFINE(HAVE_FAULTY_BINDPROTO) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

AC_MSG_CHECKING(to see if connect prototype lacks const)
AC_TRY_COMPILE([
#include <sys/types.h>
#include <sys/socket.h>
], [int connect(int s, struct sockaddr *name, int namelen);
], AC_DEFINE(HAVE_FAULTY_CONNECTPROTO) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

AC_MSG_CHECKING(to see if readv prototype lacks const)
AC_TRY_COMPILE([
#include <sys/types.h>
#include <sys/uio.h>
#include <sys/socket.h>
#include <unistd.h>
], [ssize_t readv(int, struct iovec *, int);
], AC_DEFINE(HAVE_FAULTY_READVPROTO) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

#linux (redhat 5.1) socket prototype
AC_MSG_CHECKING(socket address type for __SOCKADDR_ARG)
AC_TRY_COMPILE([
#include <sys/types.h>
#include <sys/socket.h>
], [extern int accept __P ((int __fd, __SOCKADDR_ARG __addr,
                        socklen_t *__addr_len));
], AC_DEFINE(HAVE_LINUX_SOCKADDR_TYPE) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

AC_MSG_CHECKING(to see it recvfrom takes a char pointer)
AC_TRY_COMPILE([
#include <sys/types.h>
#include <sys/socket.h>
], [int recvfrom(int s, char *buf, int len, int flags, struct sockaddr *from,
	int *fromlen);
], AC_DEFINE(HAVE_RECVFROM_CHAR) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

AC_MSG_CHECKING(for alternate sendto prototype)
AC_TRY_COMPILE([
#include <sys/types.h>
#include <sys/socket.h>
], [int sendto(int s, const char *msg, int len, int flags, const struct sockaddr *to, int tolen);
], AC_DEFINE(HAVE_SENDTO_ALT) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))


#include both <sys/ioctl.h> and <sys/sockio.h>?
if test x$have_sys_sockio_h = xt; then
	AC_MSG_CHECKING(to see if <sys/sockio.h> should be included)
	AC_EGREP_CPP(yes,[
#include <sys/ioctl.h>
#ifdef SIOCATMARK
#else
#include <sys/sockio.h>
#ifdef SIOCATMARK
yes
#endif
#endif
], AC_DEFINE(NEED_SYS_SOCKIO_H) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))
fi

#XXX should be more generic, check if nonexistent
AC_MSG_CHECKING(to see if dlopen param has DL_ and not RTLD_ prefix)
AC_EGREP_CPP(yes,[
#include <dlfcn.h>
#ifdef DL_LAZY
#else
# ifdef RTLD_LAZY
yes
# endif
#endif
], [AC_DEFINE(NEED_DYNA_RTLD) AC_MSG_RESULT(yes)], AC_MSG_RESULT(no))

#XXX should be more generic, check if nonexistent
#SV_INTERRUPT, but not SA_RESTART defined?
AC_MSG_CHECKING(to see if SV_INTERRUPT should be used)
AC_EGREP_CPP(yes,[
#include <signal.h>
#ifdef SA_RESTART
#else
# ifdef SV_INTERRUPT
yes
# endif
#endif
], AC_DEFINE(NEED_SA_RESTART) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

#XXseems to be supported on solaris2.6, but there might be some
#defines that need to be set
AC_MSG_CHECKING(if cmsghdr exists in <sys/socket.h>)
AC_TRY_COMPILE([
#include <sys/types.h>
#include <sys/socket.h>
], [struct cmsghdr foo = {1,1,1};
 struct msghdr bar;
 foo.cmsg_len = 0;
 bar.msg_controllen = 1;
], [AC_DEFINE(HAVE_CMSGHDR) 
AC_MSG_RESULT(yes)], AC_MSG_RESULT(no))

AC_MSG_CHECKING(to see if malloc_options exists)
AC_TRY_LINK([],
[extern char *malloc_options;
int main()
{
	malloc_options = 0;
	exit(0);
}], AC_DEFINE(HAVE_MALLOC_OPTIONS) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

AC_MSG_CHECKING(to see if __progname exists)
AC_TRY_LINK([],
[extern char *__progname;
int main()
{
	__progname = 0;
	exit(0);
}], AC_DEFINE(HAVE_PROGNAME) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

dnl Looking for inet_aton() in -lresolv
#XXX
AC_CHECK_LIB(resolv, inet_aton, 
	[have_inet_aton_in_lresolv=t
	 have_lresolv=t
	 LIBS="$LIBS -lresolv"
	 AC_DEFINE(HAVE_INET_ATON)])

if test x$have_inet_aton_in_lresolv != xt; then
	#inet_aton detected by checkfuncs, but absent during linking? (sunos)
	AC_MSG_CHECKING(for inet_aton)
	AC_TRY_LINK([
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
], [ inet_aton(0,0); ],
    [AC_DEFINE(HAVE_INET_ATON) AC_MSG_RESULT(yes)],  AC_MSG_RESULT(no))
fi

dnl Checks for libraries.
#-lcrypt, based on example in mail by Kaveh R. Ghazi (ghazi@caip.rutgers.edu)
#(automake mailinglist)
AC_CHECK_FUNC(crypt)
if test $ac_cv_func_crypt = no; then
      AC_CHECK_LIB(crypt, crypt)
fi

if test x$no_libwrap = xt; then
	echo "checking for main in -lwrap... libwrap disabled, test ignored"
else
	AC_CHECK_LIB(wrap, hosts_access)
fi
dnl Looking for connect() in -lsocket
AC_CHECK_LIB(socket, connect,
	[LIBS="-lsocket $LIBS"
	 have_lsocket=t])
dnl Looking for inet_addr() in -lnsl
AC_CHECK_LIB(nsl, inet_addr, 
	[LIBS="-lnsl $LIBS"
	 have_lnsl=t])

#AC_CHECK_FUNC(gethostbyname2,
#	[AC_DEFINE(HAVE_GETHOSTBYNAME2)
#	 have_gethostbyname2=t])

AC_MSG_CHECKING(for gethostbyname2)
AC_TRY_LINK([
#include <netdb.h>
], [gethostbyname2(NULL, 0);], AC_DEFINE(HAVE_GETHOSTBYNAME2) AC_MSG_RESULT(yes), 
AC_MSG_RESULT(no))

#determine library names and function placement for lib/interposition.c
#XXX
oLIBS=$LIBS
LIBS=""
AC_DEFINE_UNQUOTED(LIBRARY_LIBC, "${base_library_path}libc.so")
if test x$have_lnsl = xt; then
	AC_DEFINE_UNQUOTED(LIBRARY_LIBNSL, "${base_library_path}libnsl.so")
fi
if test x$have_lresolv = xt; then
	AC_DEFINE_UNQUOTED(LIBRARY_LIBRESOLV, "${base_library_path}libresolv.so")
fi
if test x$have_lsocket = xt; then
	AC_DEFINE_UNQUOTED(LIBRARY_LIBSOCKET, "${base_library_path}libsocket.so")
fi


#accept
if test x$have_lsocket = xt; then
	AC_CHECK_LIB(c,  accept,
	[AC_DEFINE(LIBRARY_ACCEPT, LIBRARY_LIBC)],
		AC_CHECK_LIB(socket, accept,
			AC_DEFINE(LIBRARY_ACCEPT, LIBRARY_LIBSOCKET),
			AC_MSG_WARN(unable to locate accept)))
fi

#bind
if test x$have_lsocket = xt; then
	AC_CHECK_LIB(c, bind,
	[AC_DEFINE(LIBRARY_BIND, LIBRARY_LIBC)],
		AC_CHECK_LIB(socket, bind,
			AC_DEFINE(LIBRARY_BIND, LIBRARY_LIBSOCKET),
			AC_MSG_WARN(unable to locate bind)))
fi

#connect
#XXX already tested for
if test x$have_lsocket = xt; then
	AC_CHECK_LIB(c, connect,
	[AC_DEFINE(LIBRARY_CONNECT, LIBRARY_LIBC)],
		AC_CHECK_LIB(socket, connect,
			AC_DEFINE(LIBRARY_CONNECT, LIBRARY_LIBSOCKET),
			AC_MSG_WARN(unable to locate connect)))
fi

#bindresvport
if test x$have_lsocket = xt; then
	AC_CHECK_LIB(c, bindresvport,
	[AC_DEFINE(LIBRARY_BINDRESVPORT, LIBRARY_LIBC)],
		AC_CHECK_LIB(socket, bindresvport,
			AC_DEFINE(LIBRARY_BINDRESVPORT, LIBRARY_LIBSOCKET),
			AC_MSG_WARN(unable to locate bindresvport)))
fi

#gethostbyname
if test x$have_lnsl = xt; then
	AC_CHECK_LIB(c,  gethostbyname,
	[AC_DEFINE(LIBRARY_GETHOSTBYNAME, LIBRARY_LIBC)],
		AC_CHECK_LIB(nsl, gethostbyname,
			AC_DEFINE(LIBRARY_GETHOSTBYNAME, LIBRARY_LIBNSL),
			AC_MSG_WARN(unable to locate gethostbyname)))
fi

if test x$have_gethostbyname2 = xt; then
	if test x$have_lresolv = xt; then
		AC_CHECK_LIB(c, gethostbyname2,
		[AC_DEFINE(LIBRARY_GETHOSTBYNAME2, LIBRARY_LIBC)],
			AC_CHECK_LIB(resolv, gethostbyname2,
				AC_DEFINE(LIBRARY_GETHOSTBYNAME2, LIBRARY_LIBRESOLV),
				AC_MSG_WARN(unable to locate gethostbyname2)))
	fi
fi

#getpeername
if test x$have_lsocket = xt; then
	AC_CHECK_LIB(c, getpeername,
	[AC_DEFINE(LIBRARY_GETPEERNAME, LIBRARY_LIBC)],
		AC_CHECK_LIB(socket, getpeername,
			AC_DEFINE(LIBRARY_GETPEERNAME, LIBRARY_LIBSOCKET),
			AC_MSG_WARN(unable to locate getpeername)))
fi

#getsockname
if test x$have_lsocket = xt; then
	AC_CHECK_LIB(c, getsockname,
	[AC_DEFINE(LIBRARY_GETSOCKNAME, LIBRARY_LIBC)],
		AC_CHECK_LIB(socket, getsockname,
			AC_DEFINE(LIBRARY_GETSOCKNAME, LIBRARY_LIBSOCKET),
			AC_MSG_WARN(unable to locate getsockname)))
fi

#recvfrom
if test x$have_lsocket = xt; then
	AC_CHECK_LIB(c, recvfrom,
	[AC_DEFINE(LIBRARY_RECVFROM, LIBRARY_LIBC)],
		AC_CHECK_LIB(socket, recvfrom,
			AC_DEFINE(LIBRARY_RECVFROM, LIBRARY_LIBSOCKET),
			AC_MSG_WARN(unable to locate recvfrom)))
fi

#rresvport
if test x$have_lsocket = xt; then
	AC_CHECK_LIB(c, rresvport,
	[AC_DEFINE(LIBRARY_RRESVPORT, LIBRARY_LIBC)],
		AC_CHECK_LIB(socket, rresvport,
			AC_DEFINE(LIBRARY_RRESVPORT, LIBRARY_LIBSOCKET),
			AC_MSG_WARN(unable to locate rresvport)))
fi

#recvmsg
if test x$have_lsocket = xt; then
	AC_CHECK_LIB(c, recvmsg,
	[AC_DEFINE(LIBRARY_RECVMSG, LIBRARY_LIBC)],
		AC_CHECK_LIB(socket, recvmsg,
			AC_DEFINE(LIBRARY_RECVMSG, LIBRARY_LIBSOCKET),
			AC_MSG_WARN(unable to locate recvmsg)))
fi

#sendmsg
if test x$have_lsocket = xt; then
	AC_CHECK_LIB(c, sendmsg,
	[AC_DEFINE(LIBRARY_SENDMSG, LIBRARY_LIBC)],
		AC_CHECK_LIB(socket, sendmsg,
			AC_DEFINE(LIBRARY_SENDMSG, LIBRARY_LIBSOCKET),
			AC_MSG_WARN(unable to locate sendmsg)))
fi

#send
if test x$have_lsocket = xt; then
	AC_CHECK_LIB(c, send,
	[AC_DEFINE(LIBRARY_SEND, LIBRARY_LIBC)],
		AC_CHECK_LIB(socket, send,
			AC_DEFINE(LIBRARY_SEND, LIBRARY_LIBSOCKET),
			AC_MSG_WARN(unable to locate send)))
fi

#recv
if test x$have_lsocket = xt; then
	AC_CHECK_LIB(c, recv,
	[AC_DEFINE(LIBRARY_RECV, LIBRARY_LIBC)],
		AC_CHECK_LIB(socket, recv,
			AC_DEFINE(LIBRARY_RECV, LIBRARY_LIBSOCKET),
			AC_MSG_WARN(unable to locate recv)))
fi

#sendto
if test x$have_lsocket = xt; then
	AC_CHECK_LIB(c, sendto,
	[AC_DEFINE(LIBRARY_SENDTO, LIBRARY_LIBC)],
		AC_CHECK_LIB(socket, sendto,
			AC_DEFINE(LIBRARY_SENDTO, LIBRARY_LIBSOCKET),
			AC_MSG_WARN(unable to locate sendto)))
fi

LIBS=$oLIBS

#XXX should be more generic
case $host in
	*-*-solaris*) #at least seems to use these values in 5.5.1, 5.6
		AC_DEFINE(SYMBOL_GETHOSTBYNAME, "gethostbyname")
		AC_DEFINE(SYMBOL_GETHOSTBYNAME2, "gethostbyname2")
	;;

	*-*-linux-*) # XXX This is probably wrong, settings for i386 RedHat 5.1
		AC_DEFINE_UNQUOTED(LIBRARY_LIBC, "${base_library_path}libc.so.6")
		AC_DEFINE(SYMBOL_ACCEPT, "accept")
		AC_DEFINE(SYMBOL_BIND, "bind")
		AC_DEFINE(SYMBOL_BINDRESVPORT, "bindresvport")
		AC_DEFINE(SYMBOL_CONNECT, "connect")
		AC_DEFINE(SYMBOL_GETHOSTBYNAME, "gethostbyname")
		AC_DEFINE(SYMBOL_GETHOSTBYNAME2, "gethostbyname2")
		AC_DEFINE(SYMBOL_GETPEERNAME, "getpeername")
		AC_DEFINE(SYMBOL_GETSOCKNAME, "getsockname")
		AC_DEFINE(SYMBOL_RRESVPORT, "rresvport")
		AC_DEFINE(SYMBOL_RECVFROM, "recvfrom")
		AC_DEFINE(SYMBOL_SENDTO, "sendto")
		AC_DEFINE(SYMBOL_READV, "readv")
		AC_DEFINE(SYMBOL_WRITEV, "writev")
		AC_DEFINE(SYMBOL_SEND, "send")
		AC_DEFINE(SYMBOL_RECV, "recv")
		AC_DEFINE(SYMBOL_RECVMSG, "recvmsg")
		AC_DEFINE(SYMBOL_SENDMSG, "sendmsg")
		AC_DEFINE(SYMBOL_WRITE, "write")
		AC_DEFINE(SYMBOL_READ, "read")
	;;
esac



dnl Check for in_port_t type
#solaris2.6
AC_MSG_CHECKING(whether an in_port_t typedef exists in <netinet/in.h>)
AC_EGREP_CPP(in_port_t,[
#include <netinet/in.h>
], [AC_MSG_RESULT(yes)],[
AC_MSG_RESULT(no)
AC_CHECK_TYPE(in_port_t, ubits_16)
dnl Check for in_addr_t type
AC_CHECK_TYPE(in_addr_t, ubits_32)
dnl Check for ssize_t type
AC_CHECK_TYPE(ssize_t, int)])

#linux (redhat 5.2) defines socklen_t in <socketbits.h>, which is
#included by <sys/socket.h>.  check for this first.
AC_MSG_CHECKING(for socklen_t)
AC_TRY_COMPILE([
#include <sys/types.h>
#include <sys/socket.h>
], [socklen_t foo;], 
   [AC_MSG_RESULT(yes)
    socklen_found=t],
   [AC_MSG_RESULT(no)
    AC_DEFINE(socklen_t, int)])

AC_CHECK_TYPE(int32_t, sbits_32)
AC_CHECK_TYPE(int16_t, sbits_16)

dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL
AC_FUNC_MEMCMP
AC_FUNC_SETVBUF_REVERSED
AC_TYPE_SIGNAL
AC_FUNC_STRFTIME
AC_FUNC_UTIME_NULL
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(select socket strcspn strdup strspn vwarnx hstrerror)
AC_CHECK_FUNCS(issetugid strvis snprintf getdtablesize sysconf inet_pton)
AC_CHECK_FUNCS(daemon setproctitle bzero sockatmark difftime memmove)

#XXX sun4 seems to have a profiled libc missing strerror
if test x$s_profiling = x; then
	AC_CHECK_FUNCS(strerror)
else
	case $host in
		*-*-sunos4*)
			AC_MSG_WARN(omitting strerror test on sunos4 with profiling enabled)
		;;
		*)
			AC_CHECK_FUNCS(strerror)
		;;
	esac
fi

#XXX
dnl Creating symbolic links
AC_LINK_FILES(lib/config.c, sockd/config.c)
AC_LINK_FILES(lib/config_parse.y, sockd/config_parse.y)
AC_LINK_FILES(lib/config_scan.l, sockd/config_scan.l)
AC_LINK_FILES(lib/io.c, sockd/io.c)
AC_LINK_FILES(lib/log.c, sockd/log.c)
AC_LINK_FILES(lib/protocol.c, sockd/lib_protocol.c)
AC_LINK_FILES(lib/socket.c, sockd/socket.c)
AC_LINK_FILES(lib/util.c, sockd/util.c)
AC_LINK_FILES(lib/udp_util.c, sockd/udp_util.c)
AC_LINK_FILES(lib/compat.c, sockd/compat.c)
AC_LINK_FILES(lib/debug.c, sockd/debug.c)

#The dlib directory is for building a shared library with preloading
#support (SOCKSLIBRARY_DYNAMIC is defined), when dlopen support is
#available and requested.

if test x$build_preload_lib = xt; then
	AC_LINK_FILES(lib/Raccept.c, dlib/Raccept.c)
	AC_LINK_FILES(lib/Rbind.c, dlib/Rbind.c)
	AC_LINK_FILES(lib/Rbindresvport.c, dlib/Rbindresvport.c)
	AC_LINK_FILES(lib/Rconnect.c, dlib/Rconnect.c)
	AC_LINK_FILES(lib/Rgethostbyname.c, dlib/Rgethostbyname.c)
	AC_LINK_FILES(lib/Rgetpeername.c, dlib/Rgetpeername.c)
	AC_LINK_FILES(lib/Rgetsockname.c, dlib/Rgetsockname.c)
	AC_LINK_FILES(lib/Rrresvport.c, dlib/Rrresvport.c)
	AC_LINK_FILES(lib/Rcompat.c, dlib/Rcompat.c)
	AC_LINK_FILES(lib/address.c, dlib/address.c)
	AC_LINK_FILES(lib/authneg.c, dlib/authneg.c)
	AC_LINK_FILES(lib/client.c, dlib/client.c)
	AC_LINK_FILES(lib/clientconfig.c, dlib/clientconfig.c)
	AC_LINK_FILES(lib/clientprotocol.c, dlib/clientprotocol.c)
	AC_LINK_FILES(lib/msproxy_clientprotocol.c, dlib/msproxy_clientprotocol.c)
	AC_LINK_FILES(lib/compat.c, dlib/compat.c)
	AC_LINK_FILES(lib/compat.h, dlib/compat.h)
	AC_LINK_FILES(lib/config.c, dlib/config.c)
	AC_LINK_FILES(lib/config_parse.y, dlib/config_parse.y)
	AC_LINK_FILES(lib/config_scan.l, dlib/config_scan.l)
	AC_LINK_FILES(lib/debug.c, dlib/debug.c)
	AC_LINK_FILES(lib/io.c, dlib/io.c)
	AC_LINK_FILES(lib/log.c, dlib/log.c)
	AC_LINK_FILES(lib/method_uname.c, dlib/method_uname.c)
	AC_LINK_FILES(lib/protocol.c, dlib/protocol.c)
	AC_LINK_FILES(lib/socket.c, dlib/socket.c)
	AC_LINK_FILES(lib/connectchild.c, dlib/connectchild.c)
	AC_LINK_FILES(lib/udp.c, dlib/udp.c)
	AC_LINK_FILES(lib/udp_util.c, dlib/udp_util.c)
	AC_LINK_FILES(lib/userio.c, dlib/userio.c)
	AC_LINK_FILES(lib/util.c, dlib/util.c)

	AC_OUTPUT(sockd/Makefile include/Makefile lib/Makefile dlib/Makefile Makefile example/Makefile doc/Makefile bin/Makefile)
else
#do not build anything in dlib
	AC_OUTPUT(sockd/Makefile include/Makefile lib/Makefile Makefile)
fi
