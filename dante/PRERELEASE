@(#)$Id: PRERELEASE,v 1.428 2013/08/02 09:54:56 karls Exp $

*
* This is a prerelease.  Do not use this to upgrade from a previous
* release of Dante unless you want to help testing.
* Report any problems to: dante-bugs@inet.no
*


-------------------------------------------------------------------------------
***
***  Friday, August 2, 2013 -- Dante v1.4.0-pre2
***

 o Older syntax for setting the socket buffer sizes via 
   socket.recvbuf.udp, socket.sendbuf.udp, socket.recvbuf.tcp and
   socket.sendbuf.tcp options have been deprecated and replaced with
   the more general API for setting socket options.

   "socket.recvbuf.udp" can now be set by "<interface-side>.udp.so_rcvbuf"
   "socket.sendbuf.udp" can now be set by "<interface-side>.udp.so_sndbuf"
   "socket.recvbuf.tcp" can now be set by "<interface-side>.tcp.so_rcvbuf"
   "socket.sendbuf.tcp" can now be set by "<interface-side>.tcp.so_sndbuf"

   <interface-side> refers to either "internal", for Dante's internal  
   interface(s), or "external", for Dante's external interface(s).

 o socks-rules now require a "socks" prefix (like client-rules require a 
   "client" prefix), and the socks "method" keyword has been renamed to 
   "socksmethod".

 o "socksmethod" can be set in client-rules too.  It is used to
   override the default preference for what socksmethod to select for
   which clients addresses, making it possible to by default e.g. have
   the preference "gssapi username none", but for some client-ranges
   have a different preference, e.g. "none username gssapi".

   Normally there is no need to use set this keyword in a client-rule.

 o Fallback to direct (non-proxy) routes now defaults to off in the client,
   as well as in the server.

   To keep previous behaviour in the client, with direct route fallback
   for destinations with no matching route, set SOCKS_DIRECTROUTE_FALLBACK
   to "yes" in the environment, or ./configure with --enable-drt-fallback.

   Direct fallback is enabled if there are no routes configured (as is
   usually the case in a server configuration), and disabled otherwise.

 o IPv6 is now supported in the server, but not fully supported on the
   Solaris platform yet.  Support for using interfacenames (rather that
   IP-addresses or hostnames) on Solaris is limited to IPv4 currently.
   We hope to fix this before the full release.

   Standard IPv6 address syntax is used for addresses, with the addition
   of the special address "0/0" used for matching both all IPv4 and 
   all IPv6 addresses.

 o New "monitor" object added.  Syntax is similar to rules and routes,
   but instead of applying to individual sessions, it applies to all
   sessions currently matching the addresses to monitor.

   This can be used for monitoring network anomalies related to too
   little data being transferred or too many disconnects occurring,
   triggering alarms if detected.

 o Possibility to configure system errors and DNS-errors for
   special logging in certain cases (when connecting and performing
   hostname resolving).

 o More aggressive regarding how many processes to fork when starting
   and how many processes to reserve for future clients.

   Sites with a small client load will notice an increase in the number
   of Dante processes running, though this should not cause any problems.

   Performance on sites with a large client load (many concurrent clients
   and many new clients connecting at a high rate) will be improved.

 o Added new log keyword: "tcpinfo".  Used to report more extensive
   statistics about sessions, including TCP_INFO on supported platforms.

 o SIGINFO/SIGUSR1 output is now logged at level "info" instead of level
   "debug".

 o SIGHUP code rewritten.  Should function considerably better in
   environments were SIGHUP is, for whatever reason, sent an excessive
   amount of times every second.

 o Default for the maximum number of clients an i/o process can handle has
   been increased from 8 to 32.

 o Improved UDP compatibility by sending appropriate ICMP unreachable
   errors to clients and targets, if running with the appropriate
   privileges (typically, root is required for this).

   Makes it possible for a client or target to be notified that a UDP
   packet it wanted the Dante server to forward was not forwarded.

 o Reduction in memory consumption at the expense of allocating extra
   memory dynamically in the very rare, perhaps non-existing, cases
   where the extra memory is needed.  

 o The default timeout for TCP i/o (timeout.io.tcp) has been changed from
   84000 to 0.  0 means use the kernels default, which in most cases will
   mean no timeout.  See UPGRADE for more information.

 o The session module has been merged with the mainstream Dante code,
   and has also been extended to support the following new features:
     - connection throttling (number of new sessions accepted per second).
     - state-keys.
       Two state keys are currently supported:
         - per-IP address.
         - per-hostid (hostid is supported on certain platforms, with
                       certain kernel patches, with certain clients).

   The syntax has also changed (see UPGRADE).
   See the manual for more information about the new features.

 o Code used for finding the correct outgoing address to bind when
   external.rotation is set to "route" replaced with much simpler,
   but hopefully equally (or better) functioning code.
   Idea taken from Quagga.

 o Use getpassphrase() rather then getpass() to obtain password for
   username authentication when available. Avoids 9 character limit
   on Solaris.  Suggested by Albert Fluegel <af@muc.de.example.com>

 o Use sqrt() rather than sqrtl() in stddev calculation, as sqrtl() is not
   available on some platforms (such as FreeBSD 7.2).  Problem reported
   by Rudolf Polzer <rpolzer@one-it.de.example.org>.

 o If the authentication method used was RFC931 (ident), the username
   was not always logged when it should be.
   Reported by Gregory Charot (EVENIUM) <gcharot@evenium.com.example.com>.

 o Syntax checking has been improved to better detect invalid or
   likely incorrect server configurations.

   This can result in some configurations that have previously been
   accepted or accepted with warnings by Dante, to now cause an error
   on startup, preventing the Dante server from starting up until the
   configuration error has been fixed.

 o Fixed compilation on OpenBSD with compilers not supporting -Wbounded.
   Problem report and testing by
   Mikael More <mikael.more@gmail.com.example.com>.

***
***  Tuesday, June 19, 2012 -- Dante v1.4.0-pre1
***

 o GSSAPI "clear" is no longer enabled by default, as it is not part
   of the SOCKS GSSAPI standard per se.

 o Errors related to the machine Dante is running on not having any route
   to a clients target destination are now reported as general errors
   with log level "warning", in addition to being reported as part of
   the normal session close logging.

 o external.rotation was not handling non-IPv4 target addresses correctly.
   Reported and diagnosed by Rudolf Polzer <rpolzer@one-it.de.example.com>.

 o The "--disable-libwrap" option has been renamed "--without-libwrap".

 o Fixed bug that would cause the following warning to sometimes be
   erroneously reported:
   "warning: accept(2) failed: Resource temporarily unavailable"

 o SIGINFO log information extended to include information about i/o
   buffer status and as well as UDP packet latency.

 o Real-time scheduling priority settings and CPU affinity settings made
   available in sockd.conf.

   See https://www.inet.no/dante/files/dante_realtime_preview.pdf for
   a performance analysis done in relation to these new features.

 o General API for setting socket options on sockets used by Dante
   made available in sockd.conf.

 o Support for cross compilation of client library for Android
   (system name 'arm-linux-androideabi').
   Testing and analysis by Yoav Weiss <weiss.yoav@gmail.com.example.com>.

 o Problem with sockd.init generation in dante.spec fixed.
   Reported by Luiz Gustavo Nascimento <luizgn@gmail.com.example.com>.
