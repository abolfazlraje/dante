AC_INIT(include/socks.h)

#set this to enable prerelease, changes some defaults (debug enabled)
prerelease="1"
if test x$prerelease != x; then
	prename="-pre$prerelease"
else
	prename=""
fi

AM_INIT_AUTOMAKE(dante, 1.1.0$prename)
AM_CONFIG_HEADER(include/autoconf.h)
#XXX save CFLAGS; wish to compile without -O2 when debugging
oCFLAGS=$CFLAGS
AM_PROG_LIBTOOL

AC_CANONICAL_HOST

AM_CONDITIONAL(PRERELEASE, test x$prerelease != x)

#known keywords for --enable/disable-foo(=yes/no)?
KNOWN_KEYWORDS="shared|static|debug|warnings|diagnostic|profiling|linting|libwrap|preload"
for keyword in `set | egrep '^enable_' | sed -e 's/^enable_\(.*\)=.*/\1/'`;
do
	echo $keyword | egrep "^(${KNOWN_KEYWORDS})$" > /dev/null
	if test $? -ne 0; then
		AC_MSG_WARN(unknown option '$keyword')
	fi
done

#solaris 2.5.1 is broken in many places
case $host in
    *-*-solaris2.5.1)
	AC_MSG_WARN(the server might not work properly on solaris 2.5.1)
	AC_DEFINE(HAVE_SOLARIS_2_5_1)
    ;;
esac

#disable acceptlock
case $host in

	*-*-*bsd*)
		#XXX add proper test for this?
		no_acceptlock=t
	;;

	alpha-dec-osf*)
		#XXX add proper test for this?
		no_acceptlock=t
	;;

	*-*-solaris2.6)
		#XXX add proper test for this?
		no_acceptlock=t
	;;

	*-*-solaris2.7)
		#XXX add proper test for this?
		no_acceptlock=t
	;;
esac

case $host in

	alpha-dec-osf*)
		AC_DEFINE(HAVE_DEC_PROTO)
		AC_DEFINE(HAVE_EXTRA_OSF_SYMBOLS)
		RLD_LIST="DEFAULT" #_RLD_LIST, not LD_PRELOAD
		CPPFLAGS="${CPPFLAGS} -D_XOPEN_SOURCE_EXTENDED -DBYTE_ORDER=LITTLE_ENDIAN -D_POSIX_SOURCE -D_POSIX_C_SOURCE=199309L -D_OSF_SOURCE"
	;;

	*-*-sunos4*)
		#XXX hardcode library path (find better way to do this?)
		AC_DEFINE(LIBRARY_PATH, "/usr/lib/")
		base_library_path="/usr/lib/"
		AC_MSG_WARN("notice: hardcoding /usr/lib for dlopen")
		#nonstandard libfunction workaround #XXX proper test
		AC_DEFINE(HAVE_BROKEN_VSPRINTF)
		#link problems with libresolv, hardcode domainname
		if test -s /etc/resolv.conf; then
		    domainname_hardcoded=`grep domain /etc/resolv.conf | awk '{ print $2 }'`
		fi
		no_res_init=t
		AC_DEFINE(HAVE_NO_RESOLVESTUFF)
	;;

	*-*-solaris*)
		AC_DEFINE(HAVE_SENDMSG_DEADLOCK)
		AC_DEFINE(HAVE_SOLARIS_BUGS)
	;;

	*-*-linux-*) # XXX This might only concern 2.0.x kernels (add test?)
		AC_DEFINE(HAVE_DEFECT_RECVMSG)
		AC_DEFINE(HAVE_LINUX_BUGS)
		AC_DEFINE(SPT_PADCHAR, '\0')
	;;

	*-*-openbsd*) #static sockd when profiling is enabled
		no_dynamic_profiled_sockd=t
	;;

	*-*-irix*) #_RLD_LIST, not LD_PRELOAD
		RLD_LIST="DEFAULT"
	;;
esac
AC_SUBST(RLD_LIST)

#define with hosttype
AC_DEFINE_UNQUOTED(HAVE_HOST_TYPE, "$host")

#XXX add proper test for this?
if test x$no_acceptlock != xt; then
	AC_DEFINE(NEED_ACCEPTLOCK)
fi

AC_MSG_CHECKING(for compiler flags)
case $host in

    #XXX check for compiler type, not architecture (kill the basename)
    *-*-solaris*)
	if test x`basename $ac_cv_prog_CC` = xcc; then
	    comp_flags="-Xt" #XXX needed to compile?
	fi
	AC_MSG_RESULT($comp_flags)
    ;;

    alpha-dec-osf*)
        if test x"`basename $ac_cv_prog_CC`" = xcc; then
	    comp_flags="-std1 -oldc"
	fi
	AC_MSG_RESULT($comp_flags)
    ;;

    *)
	AC_MSG_RESULT(none)
    ;;
esac

AC_MSG_CHECKING(for support for -pipe compiler flag)
CFLAGS="$oCFLAGS -pipe"
AC_TRY_RUN([
int main()
{
	return 0;
}], [comp_flags="${comp_flags} -pipe" 
     AC_MSG_RESULT(yes)], AC_MSG_RESULT(no))
CFLAGS="$oCFLAGS"	


AC_MSG_CHECKING(for compilation with debugging)
AC_ARG_ENABLE(debug,
[  --enable-debug          compile with debugging support],
	debug_enabled=t,
	[if test x$prerelease != x; then
	   debug_enabled=t
	 fi])

if test x$debug_enabled = xt; then
    #no optimalization wanted
    if test $ac_cv_prog_cc_g = yes; then
	CFLAGS="$oCFLAGS -g"
    else
	CFLAGS=$oCFLAGS
    fi
    CPPFLAGS="-DDEBUG $CPPFLAGS"
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi

#-Wall ?
AC_MSG_CHECKING(for warning flags)
AC_ARG_ENABLE(warnings,
[  --enable-warnings       show compilation warnings],
	[enable_warnings=t],
	[if test x$prerelease != x; then
	    enable_warnings=t
	 fi])

if test x$enable_warnings; then

    oCFLAGS=$CFLAGS

    #try to enable compiler specific warning flags
    if test x"`basename $ac_cv_prog_CC`" = xcc; then
	case $host in

	    *sunos4*) #sunos cc
#		warn=""
	    ;;

	    alpha-dec-osf*) #osf cc
#		warn="-w0 -check -portable -warnprotos"
	    ;;

	    *-*-solaris*) #sun cc (-Xt?)
#		warn="-vc" #XXX sun cc won't link with -vc defined
	    ;;

	    *-*-irix*) #sgi cc
		warn="-fullwarn"
	    ;;

	    *) #try -Wall (gcc)
		warn="-Wall"
            ;;
	esac
    else
#	warn="-Wall -W -Wnested-externs -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes -Wcast-align -Wcast-qual -Wbad-function-cast -Wpointer-arith -Wundef"
	warn="-Wall"
    fi
    CFLAGS="$CFLAGS $warn"
    #make sure compilation is still possible
    AC_TRY_COMPILE([],[],
   [AC_MSG_RESULT($warn)],
   [AC_MSG_RESULT(none)
    CFLAGS=$oCFLAGS])
else
    AC_MSG_RESULT(none)
fi
#XXX set warnings at the bottom; might interfere with tests
CFLAGS="$oCFLAGS $comp_flags"

#-DDIAGNOSTICS?
AC_MSG_CHECKING(for compliation with DIAGNOSTIC)
AC_ARG_ENABLE(diagnostic,
[  --enable-diagnostic     enable diagnostic],
	[AC_DEFINE(DIAGNOSTIC)
	 AC_MSG_RESULT(yes)],
	[if test x$prerelease != x; then
	      AC_DEFINE(DIAGNOSTIC)
	      AC_MSG_RESULT(yes)
	 else
	      AC_MSG_RESULT(no)
	 fi])

AC_ARG_ENABLE(profiling,
[  --enable-profiling      compile with profiling support in server],
	s_profiling=t)
AM_CONDITIONAL(SPROFIL, test x$s_profiling = xt)
#static or dynamic sockd?
AM_CONDITIONAL(STATIC_SOCKD, test x$no_dynamic_profiled_sockd = xt)
if test x$no_dynamic_profiled_sockd = xt; then
	AC_MSG_WARN(sockd is built static when profiling is enabled)
fi

AC_ARG_ENABLE(linting,
[  --enable-linting        enable lint],
	s_linting=t)
AM_CONDITIONAL(LINT, test x$s_linting = xt)

AC_MSG_CHECKING(whether libwrap should be disabled)
AC_ARG_ENABLE(libwrap,
[  --disable-libwrap       never use libwrap, even if it is available],
[if test x$enableval = xno; then
	no_libwrap=t
	AC_MSG_RESULT(yes)
else
	AC_MSG_RESULT(no)
fi], AC_MSG_RESULT(no))

#add /usr/local/include to directories to include path if tcpd.h 
#can be found there)
for dir in /local/include /usr/local/include; do
    if test -f $dir/tcpd.h; then
	CPPFLAGS="${CPPFLAGS}${CPPFLAGS:+ }-I${dir}"
	break
    fi
done

dnl Checks for programs.
AC_PROG_YACC
AC_PROG_AWK
AM_PROG_LEX
dnl Checking variable sizes

AC_CHECK_SIZEOF(char)
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)

dnl Checks for header files.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(fcntl.h limits.h malloc.h paths.h strings.h syslog.h)
AC_CHECK_HEADERS(unistd.h crypt.h sys/file.h sys/ioctl.h sys/time.h)
AC_CHECK_HEADERS(netinet/ip_var.h tcpd.h)

case $host in
	alpha-dec-osf*)
		AC_CHECK_HEADERS(netinet/ip.h)
	;;
	*) ;;
esac

#build without support for preloading?
AC_MSG_CHECKING(whether preloading should be disabled)
AC_ARG_ENABLE(preload,
[  --disable-preload       disable support for preloading shared libraries],
[if test x$enableval = xno; then
	no_preload=t
	AC_MSG_RESULT(yes)
else
	AC_MSG_RESULT(no)
fi], AC_MSG_RESULT(no))

#allow manual specification
AC_MSG_CHECKING(for hardcoded domainname)
AC_ARG_WITH(domainname,
[  --with-domainname=NAME  hardcode local domainname (only on broken platforms)], [domainname_hardcoded=$withval])

if test x${domainname_hardcoded} != x; then
    AC_DEFINE_UNQUOTED(SOCKS_DOMAINNAME, "${domainname_hardcoded}")
    AC_MSG_RESULT(yes)
    AC_MSG_WARN(using hardcoded domainname ${domainname_hardcoded})
else
    AC_MSG_RESULT(no)
    if test x${no_res_init} = xt; then
	AC_MSG_WARN(unable to locate domainname, specify if necessary)
    fi
fi

# SOCKSLIBRARY_DYNAMIC is set in the lib directory when preloading
# is supported (and requested).
# HAVE_DLFCN_H only determines if the include file exists
AC_CHECK_HEADER(dlfcn.h,
[have_dlfcn_h=t
 AC_DEFINE(HAVE_DLFCN_H)])

if test x$have_dlfcn_h = xt; then
	build_preload_lib=t #create symbolic links in dlib
fi
#XXX only set conditional if building of shared libraries are enabled
AM_CONDITIONAL(BUILD_PRELOAD_LIB, test x$have_dlfcn_h = xt)

AC_CHECK_HEADER(sys/sockio.h,
[have_sys_sockio_h=t
 AC_DEFINE(HAVE_SYS_SOCKIO_H)])

dnl Checks for typedefs, structures, and compiler characteristics.
AC_MSG_CHECKING(whether <sys/types.h> defines const)
AC_EGREP_CPP(yes,[
#include <sys/types.h>
#ifdef const
yes
#endif
], AC_MSG_RESULT(yes), [check_const="yes" AC_MSG_RESULT(no)])
if test x$check_const = xyes; then
AC_C_CONST
fi

#XXXsys/socket.h?
AC_MSG_CHECKING(for struct ip_opts in <netinet/in.h>)
AC_EGREP_CPP([struct.*ipoption],[
#include <netinet/ip_var.h>
], [AC_DEFINE(HAVE_STRUCT_IPOPTS)
    AC_MSG_RESULT(yes)],
    AC_MSG_RESULT(no))

AC_MSG_CHECKING(whether <sys/types.h> defines inline)
AC_EGREP_CPP(yes,[
#include <sys/types.h>
#ifdef inline
yes
#endif
], AC_MSG_RESULT(yes), [check_inline="yes" AC_MSG_RESULT(no)])
if test x$check_inline="yes";then
AC_C_INLINE
fi

#XXX it would perhaps be better to be consistent and use
#/usr/ucbinclude always?
#XXX not sure if the test is that good either, the problem
#surfaced when FIOASYNC was missing
AC_MSG_CHECKING(if /usr/ucbinclude/sys/ioctl.h should be used)
AC_EGREP_CPP(yes,[
#include <sys/types.h>
#include <sys/ioctl.h>
#ifdef FIOASYNC
yes
#endif
], [AC_MSG_RESULT(no)],
   [check_ucbinclude="yes"])

if test x$check_ucbinclude = xyes; then
AC_EGREP_CPP(yes,[
#include <sys/types.h>
#include "/usr/ucbinclude/sys/ioctl.h"
#ifdef FIOASYNC
yes
#endif
], [AC_MSG_RESULT(yes)
    AC_DEFINE(NEED_UCBINCLUDE_SYS_IOCTL)],
   [AC_MSG_WARN(FIOASYNC not found in <sys/ioctl.h>, program might not compile)])
fi

AC_TYPE_UID_T
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_STRUCT_ST_BLKSIZE
AC_HEADER_TIME
AC_STRUCT_TM
AC_STRUCT_TIMEZONE

AC_MSG_CHECKING(to see if openlog accepts LOG_PERROR)
AC_EGREP_CPP(yes, [
#include <syslog.h>
#ifdef LOG_PERROR
yes
#endif
], [AC_DEFINE(HAVE_OPENLOG_LOG_PERROR) AC_MSG_RESULT(yes)], AC_MSG_RESULT(no))

AC_MSG_CHECKING(to see if stdlib.h defines EXIT_FAILURE)
AC_EGREP_CPP(yes, [
#include <stdlib.h>
#ifdef EXIT_FAILURE
yes
#endif
], AC_MSG_RESULT(yes), [AC_DEFINE(NEED_EXIT_FAILURE) AC_MSG_RESULT(no)])

#XXX actually checks if AF_UNIX should be used instead of AF_LOCAL
AC_MSG_CHECKING(whether <sys/socket.h> uses AF_UNIX)
AC_EGREP_CPP(yes, [
#include <sys/types.h>
#include <sys/socket.h>
#ifdef AF_LOCAL
#else
#ifdef AF_UNIX
yes
#endif
#endif
], [AC_DEFINE(NEED_AF_LOCAL) AC_MSG_RESULT(yes)], AC_MSG_RESULT(no))

AC_MSG_CHECKING(for SIGINFO)
AC_EGREP_CPP(yes, [
#include <signal.h>
#ifdef SIGINFO
yes
#endif
], AC_DEFINE(HAVE_SIGNAL_SIGINFO) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))


AC_MSG_CHECKING(to see if MSG_WAITALL exists)
AC_EGREP_CPP(yes,[
#include <sys/socket.h>
#ifdef MSG_WAITALL
yes
#endif
], [AC_DEFINE(HAVE_MSG_WAITALL) AC_MSG_RESULT(yes)], AC_MSG_RESULT(no))

#SO_SNDLOWAT
#irix 6.2 only seems to look at lowest 8 bit of value
#solaris also seems to be borken (up to 2.6 atleast)
AC_MSG_CHECKING(whether a working SO_SNDLOWAT exists)
AC_EGREP_CPP(yes,[
#include <sys/socket.h>
#ifdef SO_SNDLOWAT
yes
#endif
], [
case $host in
	*bsd*)
		so_sndlowat=t
	;;
	*-osf*)
		so_sndlowat=t
	;;
esac
if test "x${so_sndlowat}" = xt; then
	AC_DEFINE(HAVE_SO_SNDLOWAT) AC_MSG_RESULT(yes)
else
	AC_MSG_RESULT(disabled)
	AC_MSG_WARN(performance in the server might be degraded without support for the SO_SNDLOWAT socket option)
fi],
[AC_MSG_RESULT(no)
 AC_MSG_WARN(performance in the server might be degraded without support for the SO_SNDLOWAT socket option)])

AC_MSG_CHECKING(whether realloc with a NULL pointer calls malloc)
AC_TRY_RUN([
#include <stdlib.h>
#ifndef NULL
#define NULL (char *)0
#endif

int main()
{
	/* will assume this test doesn\'t fail because of lack of memory */
	if (realloc(NULL, 1) == NULL)
		return 1;
	else
		return 0;
}], AC_MSG_RESULT(yes), [AC_DEFINE(HAVE_NOMALLOC_REALLOC) AC_MSG_RESULT(no)])

AC_MSG_CHECKING(whether free with can be called with NULL)
AC_TRY_RUN([
#include <stdlib.h>
#ifndef NULL
#define NULL (char *)0
#endif

int main()
{
	/* will assume core dump/seg fault if it doesn\'t work */
	free(NULL);
	return 0;
}], AC_MSG_RESULT(yes), [AC_DEFINE(HAVE_NONULL_FREE) AC_MSG_RESULT(no)])

#find prototypes for interposition.c
if test x$no_preload != xt; then

unset failproto

if test "x${ac_cv_header_stdc}" = xyes; then

#L_SOCKPROTO is used to determine the argument types of the functions
#which are used in dlib/interposition.c. It compares the prototypes in
#(mainly) <sys/socket.h> and compares them to a list of known
#values. The arguments to L_SOCKPROTO are:
#1: the name of the function
#2: shell code which is executed if no known prototype is found
#3...: a list of known types, the first is a list of known return values,
#      the second a list of known values for the first argument etc.
#To add new values to the list simply add the new values at the end of
#the list.

L_SOCKPROTO(connect, [failproto=t],
["int"],
["int"],
["const struct sockaddr *" "__CONST_SOCKADDR_ARG" "struct sockaddr *" "const void *"],
["socklen_t" "int" "size_t"])

L_SOCKPROTO(accept, [failproto=t],
["int"],
["int"],
["struct sockaddr *" "__SOCKADDR_ARG" "__const struct sockaddr *" "void *"],
["socklen_t *" "int *" "Psocklen_t" "size_t"])

L_SOCKPROTO(bind, [failproto=t],
["int"],
["int"],
["const struct sockaddr *" "__CONST_SOCKADDR_ARG" "struct sockaddr *" "const void *"],
["socklen_t" "int" "size_t"])

L_SOCKPROTO(getpeername, [failproto=t],
["int"],
["int"],
["struct sockaddr *" "__SOCKADDR_ARG" "void *"],
["socklen_t *" "int *" "Psocklen_t" "size_t *"])

L_SOCKPROTO(getsockname, [failproto=t],
["int"],
["int"],
["struct sockaddr *" "__SOCKADDR_ARG" "void *"],
["int *" "socklen_t *" "Psocklen_t" "size_t *"])

L_SOCKPROTO(recvfrom, [failproto=t],
["ssize_t" "int"],
["int"],
["void *" "char *"],
["size_t" "int"],
["int" "unsigned int"],
["struct sockaddr *" "__SOCKADDR_ARG" "void *"],
["socklen_t *" "int *" "Psocklen_t" "size_t *"])

L_SOCKPROTO(send, [failproto=t],
["ssize_t" "int"],
["int"],
["const void *" "__const void *" "const char *"],
["size_t" "int"],
["int" "unsigned int"])

L_SOCKPROTO(sendto, [failproto=t],
["ssize_t" "int"],
["int"],
["const void *" "__const void *" "const char *"],
["size_t" "int"],
["int" "unsigned int"],
["const struct sockaddr *" "__CONST_SOCKADDR_ARG" "const void *"],
["socklen_t" "int" "size_t"])

L_SOCKPROTO(recv, [failproto=t],
["ssize_t" "int"],
["int"],
["void *" "char *"],
["size_t" "int"],
["int" "unsigned int"])

L_SOCKPROTO(readv, [failproto=t],
["ssize_t"],
["int"],
["const struct iovec *" "__const struct iovec *" "struct iovec *"],
["int"])

L_SOCKPROTO(recvmsg, [failproto=t],
["ssize_t" "int"],
["int"],
["struct msghdr *"],
["int" "unsigned int"])

L_SOCKPROTO(writev, [failproto=t],
["ssize_t"],
["int"],
["const struct iovec *" "__const struct iovec *"],
["int"])

L_SOCKPROTO(sendmsg, [failproto=t],
["ssize_t" "int"],
["int"],
["const struct msghdr *" "__const struct msghdr *"],
["int" "unsigned int"])

L_SOCKPROTO(write, [failproto=t],
["ssize_t"],
["int"],
["const void *" "__const void *"],
["size_t" "unsigned"])

L_SOCKPROTO(read, [failproto=t],
["ssize_t"],
["int"],
["void *"],
["size_t" "unsigned"])

if test x$failproto != x; then
    echo ""
    echo "error: some unfamiliar function prototypes were found,"
    echo "       and will probably mean that building of libdsocks,"
    echo "       which allows on-the-fly socksification of dynamic"
    echo "       binaries will not work."
    echo ""
    echo "       You have several options:"
    echo ""
    echo "       1. If you do not need libdsocks, run configure with the"
    echo "          option --disable-preload."
    echo "       2. Send the output from configure to dante-bugs@inet.no"
    echo "          and if possible you'll get a patch fixing the problem."
    echo "          If you think this might be a generic problem, sending"
    echo "          the output might allow the problem to be solved for all"
    echo "          users of your platform in the next release."
    echo "       3. Fix the problem yourself. If you have autoconf installed,"
    echo "          using the output above to modify configure.in should"
    echo "          enable you to compile without problems."
    exit 1
fi

else
    #defaults
    AC_DEFINE(HAVE_PROT_CONNECT_0, int)
    AC_DEFINE(HAVE_PROT_CONNECT_1, int)
    AC_DEFINE(HAVE_PROT_CONNECT_2, const struct sockaddr *)
    AC_DEFINE(HAVE_PROT_CONNECT_3, socklen_t)
	     
    AC_DEFINE(HAVE_PROT_ACCEPT_0, int)
    AC_DEFINE(HAVE_PROT_ACCEPT_1, int)
    AC_DEFINE(HAVE_PROT_ACCEPT_2, struct sockaddr *)
    AC_DEFINE(HAVE_PROT_ACCEPT_3, socklen_t *)
	     
    AC_DEFINE(HAVE_PROT_BIND_0, int)
    AC_DEFINE(HAVE_PROT_BIND_1, int)
    AC_DEFINE(HAVE_PROT_BIND_2, const struct sockaddr *)
    AC_DEFINE(HAVE_PROT_BIND_3, socklen_t)
	     
    AC_DEFINE(HAVE_PROT_GETPEERNAME_0, int)
    AC_DEFINE(HAVE_PROT_GETPEERNAME_1, int)
    AC_DEFINE(HAVE_PROT_GETPEERNAME_2, struct sockaddr *)
    AC_DEFINE(HAVE_PROT_GETPEERNAME_3, socklen_t *)
	     
    AC_DEFINE(HAVE_PROT_GETSOCKNAME_0, int)
    AC_DEFINE(HAVE_PROT_GETSOCKNAME_1, int)
    AC_DEFINE(HAVE_PROT_GETSOCKNAME_2, struct sockaddr *)
    AC_DEFINE(HAVE_PROT_GETSOCKNAME_3, socklen_t *)
	     
    AC_DEFINE(HAVE_PROT_RECVFROM_0, ssize_t)
    AC_DEFINE(HAVE_PROT_RECVFROM_1, int)
    AC_DEFINE(HAVE_PROT_RECVFROM_2, void *)
    AC_DEFINE(HAVE_PROT_RECVFROM_3, size_t)
    AC_DEFINE(HAVE_PROT_RECVFROM_4, int)
    AC_DEFINE(HAVE_PROT_RECVFROM_5, struct sockaddr *)
    AC_DEFINE(HAVE_PROT_RECVFROM_6, socklen_t *)
	     
    AC_DEFINE(HAVE_PROT_SEND_0, ssize_t)
    AC_DEFINE(HAVE_PROT_SEND_1, int)
    AC_DEFINE(HAVE_PROT_SEND_2, const void *)
    AC_DEFINE(HAVE_PROT_SEND_3, size_t)
    AC_DEFINE(HAVE_PROT_SEND_4, int)
	     
    AC_DEFINE(HAVE_PROT_RECV_0, ssize_t)
    AC_DEFINE(HAVE_PROT_RECV_1, int)
    AC_DEFINE(HAVE_PROT_RECV_2, void *)
    AC_DEFINE(HAVE_PROT_RECV_3, size_t)
    AC_DEFINE(HAVE_PROT_RECV_4, int)
	     
    AC_DEFINE(HAVE_PROT_SENDTO_0, ssize_t)
    AC_DEFINE(HAVE_PROT_SENDTO_1, int)
    AC_DEFINE(HAVE_PROT_SENDTO_2, const void *)
    AC_DEFINE(HAVE_PROT_SENDTO_3, size_t)
    AC_DEFINE(HAVE_PROT_SENDTO_4, int)
    AC_DEFINE(HAVE_PROT_SENDTO_5, const struct sockaddr *)
    AC_DEFINE(HAVE_PROT_SENDTO_6, socklen_t)
	     
    AC_DEFINE(HAVE_PROT_READV_0, ssize_t)
    AC_DEFINE(HAVE_PROT_READV_1, int)
    AC_DEFINE(HAVE_PROT_READV_2, const struct iovec *)
    AC_DEFINE(HAVE_PROT_READV_3, int)
	     
    AC_DEFINE(HAVE_PROT_WRITEV_0, ssize_t)
    AC_DEFINE(HAVE_PROT_WRITEV_1, int)
    AC_DEFINE(HAVE_PROT_WRITEV_2, const struct iovec *)
    AC_DEFINE(HAVE_PROT_WRITEV_3, int)
	     
    AC_DEFINE(HAVE_PROT_RECVMSG_0, ssize_t)
    AC_DEFINE(HAVE_PROT_RECVMSG_1, int)
    AC_DEFINE(HAVE_PROT_RECVMSG_2, struct msghdr *)
    AC_DEFINE(HAVE_PROT_RECVMSG_3, int)
	     
    AC_DEFINE(HAVE_PROT_SENDMSG_0, ssize_t)
    AC_DEFINE(HAVE_PROT_SENDMSG_1, int)
    AC_DEFINE(HAVE_PROT_SENDMSG_2, const struct msghdr *)
    AC_DEFINE(HAVE_PROT_SENDMSG_3, int)
	     
    AC_DEFINE(HAVE_PROT_WRITE_0, ssize_t)
    AC_DEFINE(HAVE_PROT_WRITE_1, int)
    AC_DEFINE(HAVE_PROT_WRITE_2, const void *)
    AC_DEFINE(HAVE_PROT_WRITE_3, size_t)
	     
    AC_DEFINE(HAVE_PROT_READ_0, ssize_t)
    AC_DEFINE(HAVE_PROT_READ_1, int)
    AC_DEFINE(HAVE_PROT_READ_2, void *)
    AC_DEFINE(HAVE_PROT_READ_3, size_t)
fi #stdc_headers
   
fi #no preload

AC_MSG_CHECKING(if getsockopt needs cast)
AC_TRY_COMPILE([
#include <sys/types.h>
#include <sys/socket.h>
int getsockopt(int, int, int, char *, int *);
], [ 1 ], [AC_DEFINE(NEED_GETSOCKOPT_CAST) AC_MSG_RESULT(yes)],
 AC_MSG_RESULT(no))

#include both <sys/ioctl.h> and <sys/sockio.h>?
if test x$have_sys_sockio_h = xt; then
	AC_MSG_CHECKING(to see if <sys/sockio.h> should be included)
	AC_EGREP_CPP(yes,[
#include <sys/ioctl.h>
#ifdef SIOCATMARK
#else
#include <sys/sockio.h>
#ifdef SIOCATMARK
yes
#endif
#endif
], AC_DEFINE(NEED_SYS_SOCKIO_H) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))
fi

#XXX should be more generic, check if nonexistent
AC_MSG_CHECKING(to see if dlopen param has DL_ and not RTLD_ prefix)
AC_EGREP_CPP(yes,[
#include <dlfcn.h>
#ifdef DL_LAZY
#else
# ifdef RTLD_LAZY
yes
# endif
#endif
], [AC_DEFINE(NEED_DYNA_RTLD) AC_MSG_RESULT(yes)], AC_MSG_RESULT(no))

#XXX should be more generic, check if nonexistent
#SV_INTERRUPT, but not SA_RESTART defined?
AC_MSG_CHECKING(to see if SV_INTERRUPT should be used)
AC_EGREP_CPP(yes,[
#include <signal.h>
#ifdef SA_RESTART
#else
# ifdef SV_INTERRUPT
yes
# endif
#endif
], AC_DEFINE(NEED_SA_RESTART) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

#XXseems to be supported on solaris2.6, but there might be some
#defines that need to be set
AC_MSG_CHECKING(if cmsghdr exists in <sys/socket.h>)
AC_TRY_COMPILE([
#include <sys/types.h>
#include <sys/socket.h>
], [struct cmsghdr foo = {1,1,1};
 struct msghdr bar;
 foo.cmsg_len = 0;
 bar.msg_controllen = 1;
], [AC_DEFINE(HAVE_CMSGHDR)
AC_MSG_RESULT(yes)], AC_MSG_RESULT(no))

AC_MSG_CHECKING(to see if malloc_options exists)
AC_TRY_LINK([extern char *malloc_options;],
[ malloc_options = 0; ],
AC_DEFINE(HAVE_MALLOC_OPTIONS) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

AC_MSG_CHECKING(to see if __progname exists)
AC_TRY_LINK([extern char *__progname;],
[ __progname = 0; ],
AC_DEFINE(HAVE_PROGNAME) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

dnl Looking for inet_aton() in -lresolv
#XXX
AC_CHECK_FUNC(inet_aton)
if test $ac_cv_func_inet_aton = no; then
	AC_CHECK_LIB(resolv, inet_aton,
		[have_inet_aton_in_lresolv=t
		have_lresolv=t
		need_lib_libresolv=t
		LIBS="$LIBS -lresolv"
		AC_DEFINE(HAVE_INET_ATON)])
fi

if test x$have_inet_aton_in_lresolv != xt; then
	#inet_aton detected by above, but absent during linking? (sunos)
	AC_MSG_CHECKING(to see if linking with inet_aton works)
	AC_TRY_LINK([
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
], [ inet_aton(0,0); ],
    [AC_DEFINE(HAVE_INET_ATON) AC_MSG_RESULT(yes)],  AC_MSG_RESULT(no))
fi

dnl Checks for libraries.
#-lcrypt, based on example in mail by Kaveh R. Ghazi (ghazi@caip.rutgers.edu)
#(automake mailinglist)
AC_CHECK_FUNC(crypt)
if test $ac_cv_func_crypt = no; then
      AC_CHECK_LIB(crypt, crypt)
fi

if test x$no_libwrap = xt; then
	echo "checking for main in -lwrap... libwrap disabled, test ignored"
else
	AC_CHECK_LIB(wrap, hosts_access)
fi

dnl Looking for connect() in -lsocket
oLIBS=$LIBS
LIBS=""
AC_CHECK_FUNC(connect)
if test $ac_cv_func_connect = no; then
	AC_CHECK_LIB(socket, connect,
		[LIBS="-lsocket $LIBS"
		need_lib_libsocket=t
		have_lsocket=t])
fi
LIBS="$LIBS $oLIBS"

dnl Looking for inet_addr() in -lnsl
oLIBS=$LIBS
LIBS=""
AC_CHECK_FUNC(inet_addr)
if test $ac_cv_func_inet_addr = no; then
	AC_CHECK_LIB(nsl, inet_addr,
		[LIBS="-lnsl $LIBS"
		need_lib_libnsl=t
		have_lnsl=t])
fi
LIBS="$LIBS $oLIBS"

#AC_CHECK_FUNC(gethostbyname2,
#	[AC_DEFINE(HAVE_GETHOSTBYNAME2)
#	 have_gethostbyname2=t])

AC_MSG_CHECKING(for gethostbyname2)
AC_TRY_LINK([
#include <netdb.h>
], [ gethostbyname2(0, 0); ],
 [AC_DEFINE(HAVE_GETHOSTBYNAME2)
  AC_MSG_RESULT(yes)
  have_gethostbyname2=t],
AC_MSG_RESULT(no))

oLIBS=$LIBS
LIBS=""
#XXX
#AC_MSG_CHECKING(for dlopen)
#AC_TRY_LINK([
##include <dlfcn.h>
#], [dlopen("/foo", 0);],
#   [have_dlopen_in_libc=t
#    AC_MSG_RESULT(yes)], [AC_MSG_RESULT(no)])
#AC_CHECK_LIB(c, dlopen)
#XXX $ac_ refs
#if test $ac_cv_lib_c_dlopen = no; then
#if test x$have_dlopen_in_libc = x; then
	AC_CHECK_LIB(dl, dlopen)
	if test $ac_cv_lib_dl_dlopen = yes; then
		case $host in
		    *-*-sunos4*) #XXX attemtpt to get libdl name
			libdl=`ls ${base_library_path}libdl.so* | sed -e 's/.*\///' | sort -nr | head -1`
			if test x$libdl = x; then
			    AC_MSG_WARN(unable to locate libdl)
			else
			    LIBRARY_DLOPEN=${base_library_path}${libdl}
			    AC_MSG_WARN(hardcoding libdl to $LIBRARY_DLOPEN)
			fi
		    ;;
		    *)
			LIBRARY_DLOPEN="${base_library_path}libdl.so"
		    ;;
		esac
	else
		LIBRARY_DLOPEN=""
	fi
#else
#	LIBRARY_DLOPEN=""
#fi
AC_SUBST(LIBRARY_DLOPEN)
LIBS=$oLIBS

#determine library names and function placement for lib/interposition.c
#XXX
oLIBS=$LIBS
LIBS=""
if test x$have_lnsl = xt; then
	AC_DEFINE_UNQUOTED(LIBRARY_LIBNSL, "${base_library_path}libnsl.so")
	LIBRARY_LIBNSL="${base_library_path}libnsl.so"
	fi
if test x$have_lresolv = xt; then
	AC_DEFINE_UNQUOTED(LIBRARY_LIBRESOLV, "${base_library_path}libresolv.so")
	LIBRARY_LIBRESOLV="${base_library_path}libresolv.so"
fi
if test x$have_lsocket = xt; then
	AC_DEFINE_UNQUOTED(LIBRARY_LIBSOCKET, "${base_library_path}libsocket.so")
	LIBRARY_LIBSOCKET="${base_library_path}libsocket.so"
fi

#accept
if test x$have_lsocket = xt; then
	AC_CHECK_LIB(c,  accept,
	[AC_DEFINE(LIBRARY_ACCEPT, LIBRARY_LIBC)],
		AC_CHECK_LIB(socket, accept,
			AC_DEFINE(LIBRARY_ACCEPT, LIBRARY_LIBSOCKET),
			AC_MSG_WARN(unable to locate accept)))
fi

#bind
if test x$have_lsocket = xt; then
	AC_CHECK_LIB(c, bind,
	[AC_DEFINE(LIBRARY_BIND, LIBRARY_LIBC)],
		AC_CHECK_LIB(socket, bind,
			AC_DEFINE(LIBRARY_BIND, LIBRARY_LIBSOCKET),
			AC_MSG_WARN(unable to locate bind)))
fi

#connect
#XXX already tested for
if test x$have_lsocket = xt; then
	AC_CHECK_LIB(c, connect,
	[AC_DEFINE(LIBRARY_CONNECT, LIBRARY_LIBC)],
		AC_CHECK_LIB(socket, connect,
			AC_DEFINE(LIBRARY_CONNECT, LIBRARY_LIBSOCKET),
			AC_MSG_WARN(unable to locate connect)))
fi

#bindresvport
if test x$have_lsocket = xt; then
	AC_CHECK_LIB(c, bindresvport,
	[AC_DEFINE(LIBRARY_BINDRESVPORT, LIBRARY_LIBC)],
		AC_CHECK_LIB(socket, bindresvport,
			AC_DEFINE(LIBRARY_BINDRESVPORT, LIBRARY_LIBSOCKET),
			AC_MSG_WARN(unable to locate bindresvport)))
fi

#gethostbyname
if test x$have_lnsl = xt; then
	AC_CHECK_LIB(c,  gethostbyname,
	[AC_DEFINE(LIBRARY_GETHOSTBYNAME, LIBRARY_LIBC)],
		AC_CHECK_LIB(nsl, gethostbyname,
			AC_DEFINE(LIBRARY_GETHOSTBYNAME, LIBRARY_LIBNSL),
			AC_MSG_WARN(unable to locate gethostbyname)))
fi

if test x$have_gethostbyname2 = xt; then
	if test x$have_lresolv = xt; then
		AC_CHECK_LIB(c, gethostbyname2,
		[AC_DEFINE(LIBRARY_GETHOSTBYNAME2, LIBRARY_LIBC)],
			AC_CHECK_LIB(resolv, gethostbyname2,
				AC_DEFINE(LIBRARY_GETHOSTBYNAME2, LIBRARY_LIBRESOLV),
				AC_MSG_WARN(unable to locate gethostbyname2)))
	fi
fi

#getpeername
if test x$have_lsocket = xt; then
	AC_CHECK_LIB(c, getpeername,
	[AC_DEFINE(LIBRARY_GETPEERNAME, LIBRARY_LIBC)],
		AC_CHECK_LIB(socket, getpeername,
			AC_DEFINE(LIBRARY_GETPEERNAME, LIBRARY_LIBSOCKET),
			AC_MSG_WARN(unable to locate getpeername)))
fi

#getsockname
if test x$have_lsocket = xt; then
	AC_CHECK_LIB(c, getsockname,
	[AC_DEFINE(LIBRARY_GETSOCKNAME, LIBRARY_LIBC)],
		AC_CHECK_LIB(socket, getsockname,
			AC_DEFINE(LIBRARY_GETSOCKNAME, LIBRARY_LIBSOCKET),
			AC_MSG_WARN(unable to locate getsockname)))
fi

#recvfrom
if test x$have_lsocket = xt; then
	AC_CHECK_LIB(c, recvfrom,
	[AC_DEFINE(LIBRARY_RECVFROM, LIBRARY_LIBC)],
		AC_CHECK_LIB(socket, recvfrom,
			AC_DEFINE(LIBRARY_RECVFROM, LIBRARY_LIBSOCKET),
			AC_MSG_WARN(unable to locate recvfrom)))
fi

#rresvport
if test x$have_lsocket = xt; then
	AC_CHECK_LIB(c, rresvport,
	[AC_DEFINE(LIBRARY_RRESVPORT, LIBRARY_LIBC)],
		AC_CHECK_LIB(socket, rresvport,
			AC_DEFINE(LIBRARY_RRESVPORT, LIBRARY_LIBSOCKET),
			AC_MSG_WARN(unable to locate rresvport)))
fi

#recvmsg
if test x$have_lsocket = xt; then
	AC_CHECK_LIB(c, recvmsg,
	[AC_DEFINE(LIBRARY_RECVMSG, LIBRARY_LIBC)],
		AC_CHECK_LIB(socket, recvmsg,
			AC_DEFINE(LIBRARY_RECVMSG, LIBRARY_LIBSOCKET),
			AC_MSG_WARN(unable to locate recvmsg)))
fi

#sendmsg
if test x$have_lsocket = xt; then
	AC_CHECK_LIB(c, sendmsg,
	[AC_DEFINE(LIBRARY_SENDMSG, LIBRARY_LIBC)],
		AC_CHECK_LIB(socket, sendmsg,
			AC_DEFINE(LIBRARY_SENDMSG, LIBRARY_LIBSOCKET),
			AC_MSG_WARN(unable to locate sendmsg)))
fi

#send
if test x$have_lsocket = xt; then
	AC_CHECK_LIB(c, send,
	[AC_DEFINE(LIBRARY_SEND, LIBRARY_LIBC)],
		AC_CHECK_LIB(socket, send,
			AC_DEFINE(LIBRARY_SEND, LIBRARY_LIBSOCKET),
			AC_MSG_WARN(unable to locate send)))
fi

#recv
if test x$have_lsocket = xt; then
	AC_CHECK_LIB(c, recv,
	[AC_DEFINE(LIBRARY_RECV, LIBRARY_LIBC)],
		AC_CHECK_LIB(socket, recv,
			AC_DEFINE(LIBRARY_RECV, LIBRARY_LIBSOCKET),
			AC_MSG_WARN(unable to locate recv)))
fi

#sendto
if test x$have_lsocket = xt; then
	AC_CHECK_LIB(c, sendto,
	[AC_DEFINE(LIBRARY_SENDTO, LIBRARY_LIBC)],
		AC_CHECK_LIB(socket, sendto,
			AC_DEFINE(LIBRARY_SENDTO, LIBRARY_LIBSOCKET),
			AC_MSG_WARN(unable to locate sendto)))
fi

LIBS=$oLIBS

if test x$need_lib_libnsl = x; then
	LIBRARY_LIBNSL=""
fi
if test x$need_lib_libresolv = x; then
	LIBRARY_LIBRESOLV=""
fi
if test x$need_lib_libsocket = x; then
	LIBRARY_LIBSOCKET=""
fi

AC_SUBST(LIBRARY_LIBNSL)
AC_SUBST(LIBRARY_LIBRESOLV)
AC_SUBST(LIBRARY_LIBSOCKET)

#specify location of the socks library in socksify too
#XXX exec_prefix and prefix have the value NONE here if they are unset
o_exec_prefix=${exec_prefix}
o_prefix=${prefix}
if test x${prefix} = xNONE; then
	prefix=$ac_default_prefix
fi
if test x${exec_prefix} = xNONE; then
	exec_prefix=$prefix
fi
LIBRARY_PREFIX=`eval echo \$libdir`
LIBRARY_PREFIX=`eval echo \$LIBRARY_PREFIX`
exec_prefix=${o_exec_prefix}
prefix=${o_prefix}
AC_SUBST(LIBRARY_PREFIX)

#allow user to specify libc name, use default value otherwise
AC_MSG_CHECKING(for libc name)
AC_ARG_WITH(libc,
[  --with-libc=NAME        manually set name of c library if necessary],
[LIBC_NAME=$withval])

#set default?
if test "x${LIBC_NAME}" = x; then
	case $host in
		*-*-linux-*)
		#XXX attempt to find latest c library
		#can't set it to libc.so directly, might be ld script
		LIBC_NAME=`ls /usr/lib/libc.so* /lib/libc.so* | sed -e 's/.*\///' | sort -nr | head -1`
		if test "x${LIBC_NAME}" = x; then
		        #nothing found, set libc.so anyway
			LIBC_NAME="${base_library_path}libc.so"
		fi
	;;
	*)
		LIBC_NAME="${base_library_path}libc.so"
	;;
	esac
fi

AC_MSG_RESULT(${LIBC_NAME})
AC_DEFINE_UNQUOTED(LIBRARY_LIBC, "${LIBC_NAME}")


#XXX should be more generic, values shouldn't be hardcoded
case $host in

	*-*-solaris*)
		AC_DEFINE(SYMBOL_ACCEPT, "accept")
		AC_DEFINE(SYMBOL_BIND, "bind")
		AC_DEFINE(SYMBOL_BINDRESVPORT, "bindresvport")
		AC_DEFINE(SYMBOL_CONNECT, "connect")
		AC_DEFINE(SYMBOL_GETHOSTBYNAME, "gethostbyname")
		AC_DEFINE(SYMBOL_GETHOSTBYNAME2, "gethostbyname2")
		AC_DEFINE(SYMBOL_GETPEERNAME, "getpeername")
		AC_DEFINE(SYMBOL_GETSOCKNAME, "getsockname")
		AC_DEFINE(SYMBOL_RRESVPORT, "rresvport")
		AC_DEFINE(SYMBOL_RECVFROM, "recvfrom")
		AC_DEFINE(SYMBOL_SENDTO, "sendto")
		AC_DEFINE(SYMBOL_READV, "readv")
		AC_DEFINE(SYMBOL_WRITEV, "writev")
		AC_DEFINE(SYMBOL_SEND, "send")
		AC_DEFINE(SYMBOL_RECV, "recv")
		AC_DEFINE(SYMBOL_RECVMSG, "recvmsg")
		AC_DEFINE(SYMBOL_SENDMSG, "sendmsg")
		AC_DEFINE(SYMBOL_WRITE, "write")
		AC_DEFINE(SYMBOL_READ, "read")

	;;

	*-*-linux-*)
		AC_DEFINE(SYMBOL_ACCEPT, "accept")
		AC_DEFINE(SYMBOL_BIND, "bind")
		AC_DEFINE(SYMBOL_BINDRESVPORT, "bindresvport")
		AC_DEFINE(SYMBOL_CONNECT, "connect")
		AC_DEFINE(SYMBOL_GETHOSTBYNAME, "gethostbyname")
		AC_DEFINE(SYMBOL_GETHOSTBYNAME2, "gethostbyname2")
		AC_DEFINE(SYMBOL_GETPEERNAME, "getpeername")
		AC_DEFINE(SYMBOL_GETSOCKNAME, "getsockname")
		AC_DEFINE(SYMBOL_RRESVPORT, "rresvport")
		AC_DEFINE(SYMBOL_RECVFROM, "recvfrom")
		AC_DEFINE(SYMBOL_SENDTO, "sendto")
		AC_DEFINE(SYMBOL_READV, "readv")
		AC_DEFINE(SYMBOL_WRITEV, "writev")
		AC_DEFINE(SYMBOL_SEND, "send")
		AC_DEFINE(SYMBOL_RECV, "recv")
		AC_DEFINE(SYMBOL_RECVMSG, "recvmsg")
		AC_DEFINE(SYMBOL_SENDMSG, "sendmsg")
		AC_DEFINE(SYMBOL_WRITE, "write")
		AC_DEFINE(SYMBOL_READ, "read")
	;;

	*-*-irix*)
		AC_DEFINE(SYMBOL_ACCEPT, "accept")
		AC_DEFINE(SYMBOL_BIND, "bind")
		AC_DEFINE(SYMBOL_BINDRESVPORT, "bindresvport")
		AC_DEFINE(SYMBOL_CONNECT, "connect")
		AC_DEFINE(SYMBOL_GETHOSTBYNAME, "gethostbyname")
		AC_DEFINE(SYMBOL_GETHOSTBYNAME2, "gethostbyname2")
		AC_DEFINE(SYMBOL_GETPEERNAME, "getpeername")
		AC_DEFINE(SYMBOL_GETSOCKNAME, "getsockname")
		AC_DEFINE(SYMBOL_RRESVPORT, "rresvport")
		AC_DEFINE(SYMBOL_RECVFROM, "recvfrom")
		AC_DEFINE(SYMBOL_SENDTO, "sendto")
		AC_DEFINE(SYMBOL_READV, "readv")
		AC_DEFINE(SYMBOL_WRITEV, "writev")
		AC_DEFINE(SYMBOL_SEND, "send")
		AC_DEFINE(SYMBOL_RECV, "recv")
		AC_DEFINE(SYMBOL_RECVMSG, "recvmsg")
		AC_DEFINE(SYMBOL_SENDMSG, "sendmsg")
		AC_DEFINE(SYMBOL_WRITE, "write")
		AC_DEFINE(SYMBOL_READ, "read")
	;;

	alpha-dec-osf*)
		AC_DEFINE(SYMBOL_ACCEPT, "accept")
		AC_DEFINE(SYMBOL_BIND, "bind")
		AC_DEFINE(SYMBOL_BINDRESVPORT, "bindresvport")
		AC_DEFINE(SYMBOL_CONNECT, "connect")
		AC_DEFINE(SYMBOL_GETHOSTBYNAME, "gethostbyname")
		AC_DEFINE(SYMBOL_GETHOSTBYNAME2, "gethostbyname2")
		AC_DEFINE(SYMBOL_GETPEERNAME, "getpeername")
		AC_DEFINE(SYMBOL_GETSOCKNAME, "getsockname")
		AC_DEFINE(SYMBOL_RRESVPORT, "rresvport")
		AC_DEFINE(SYMBOL_RECVFROM, "recvfrom")
		AC_DEFINE(SYMBOL_SENDTO, "sendto")
		AC_DEFINE(SYMBOL_READV, "readv")
		AC_DEFINE(SYMBOL_WRITEV, "writev")
		AC_DEFINE(SYMBOL_SEND, "send")
		AC_DEFINE(SYMBOL_RECV, "recv")
		AC_DEFINE(SYMBOL_RECVMSG, "recvmsg")
		AC_DEFINE(SYMBOL_SENDMSG, "sendmsg")
		AC_DEFINE(SYMBOL_WRITE, "write")
		AC_DEFINE(SYMBOL_READ, "read")
	;;
esac

#XXX try to detect gcc bug (irix 64 problem, affects among others inet_ntoa)
AC_MSG_CHECKING(for incorrect inet_ntoa behaviour)
AC_TRY_RUN([
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/socket.h>
int main(void)
{
  struct sockaddr_in addr;
  char *a, *b = "195.195.195.195";
  addr.sin_addr.s_addr = inet_addr(b);
  a = inet_ntoa(addr.sin_addr);
  if (strcmp(a, b) == 0)
    return 1;
  else
    return 0;

}
], [AC_DEFINE(HAVE_BROKEN_INET_NTOA) AC_MSG_RESULT(yes)], AC_MSG_RESULT(no))

dnl Check for in_port_t type
#solaris2.6
AC_MSG_CHECKING(whether an in_port_t typedef exists in <netinet/in.h>)
AC_EGREP_CPP(in_port_t,[
#include <netinet/in.h>
], [AC_MSG_RESULT(yes)],[
AC_MSG_RESULT(no)
AC_CHECK_TYPE(in_port_t, ubits_16)
dnl Check for in_addr_t type
AC_CHECK_TYPE(in_addr_t, ubits_32)
dnl Check for ssize_t type
AC_CHECK_TYPE(ssize_t, int)])

#linux (redhat 5.2) defines socklen_t in <socketbits.h>, which is
#included by <sys/socket.h>.  check for this first.
AC_MSG_CHECKING(for socklen_t)
AC_TRY_COMPILE([
#include <sys/types.h>
#include <sys/socket.h>
], [socklen_t foo = 1;],
   [AC_MSG_RESULT(yes)
    socklen_found=t],
   [AC_MSG_RESULT(no)
    socklen_found=""])

if test x"$socklen_found" = x; then
    case $host in
	alpha-dec-osf*)
		AC_DEFINE(socklen_t, size_t)
		;;
	*)
		AC_DEFINE(socklen_t, int)
		;;
    esac
fi

#sig_atomic_t
AC_MSG_CHECKING(for sig_atomic_t in <signal.h>)
AC_EGREP_CPP(sig_atomic_t,[
#include <signal.h>
], [AC_DEFINE(HAVE_SIG_ATOMIC_T) AC_MSG_RESULT(yes)], [AC_MSG_RESULT(no)])

AC_CHECK_TYPE(int32_t, sbits_32)
AC_CHECK_TYPE(int16_t, sbits_16)

dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL
AC_FUNC_MEMCMP
AC_FUNC_SETVBUF_REVERSED
AC_TYPE_SIGNAL
AC_FUNC_STRFTIME
AC_FUNC_UTIME_NULL
AC_FUNC_VPRINTF
#XXX disabled: vwarnx
AC_CHECK_FUNCS(select socket strcspn strdup strspn hstrerror)
AC_CHECK_FUNCS(issetugid strvis snprintf getdtablesize sysconf inet_pton)
AC_CHECK_FUNCS(daemon setproctitle bzero sockatmark difftime memmove)
AC_CHECK_FUNCS(vsyslog)

#XXX sun4 seems to have a profiled libc missing strerror
if test x$s_profiling = x; then
	AC_CHECK_FUNCS(strerror)
else
	case $host in

		*-*-sunos4*)
			AC_MSG_WARN(omitting strerror test on sunos4 with profiling enabled)
		;;

		*)
			AC_CHECK_FUNCS(strerror)
		;;
	esac
fi

#add any warning flags (value set above)
CFLAGS="$CFLAGS $warn"

#XXX
export CFLAGS
export CPPFLAGS

#XXXslow
dnl Creating symbolic links
AC_LINK_FILES(lib/config.c, sockd/config.c)
AC_LINK_FILES(lib/config_parse.y, sockd/config_parse.y)
AC_LINK_FILES(lib/config_scan.l, sockd/config_scan.l)
AC_LINK_FILES(lib/io.c, sockd/io.c)
AC_LINK_FILES(lib/log.c, sockd/log.c)
AC_LINK_FILES(lib/protocol.c, sockd/lib_protocol.c)
AC_LINK_FILES(lib/socket.c, sockd/socket.c)
AC_LINK_FILES(lib/util.c, sockd/util.c)
AC_LINK_FILES(lib/udp_util.c, sockd/udp_util.c)
AC_LINK_FILES(lib/debug.c, sockd/debug.c)

#The dlib directory is for building a shared library with preloading
#support (SOCKSLIBRARY_DYNAMIC is defined), when dlopen support is
#available and requested.

AC_LINK_FILES(lib/Raccept.c, dlib/Raccept.c)
AC_LINK_FILES(lib/Rbind.c, dlib/Rbind.c)
AC_LINK_FILES(lib/Rbindresvport.c, dlib/Rbindresvport.c)
AC_LINK_FILES(lib/Rconnect.c, dlib/Rconnect.c)
AC_LINK_FILES(lib/Rgethostbyname.c, dlib/Rgethostbyname.c)
AC_LINK_FILES(lib/Rgetpeername.c, dlib/Rgetpeername.c)
AC_LINK_FILES(lib/Rgetsockname.c, dlib/Rgetsockname.c)
AC_LINK_FILES(lib/Rrresvport.c, dlib/Rrresvport.c)
AC_LINK_FILES(lib/Rcompat.c, dlib/Rcompat.c)
AC_LINK_FILES(lib/address.c, dlib/address.c)
AC_LINK_FILES(lib/authneg.c, dlib/authneg.c)
AC_LINK_FILES(lib/client.c, dlib/client.c)
AC_LINK_FILES(lib/clientconfig.c, dlib/clientconfig.c)
AC_LINK_FILES(lib/clientprotocol.c, dlib/clientprotocol.c)
AC_LINK_FILES(lib/msproxy_clientprotocol.c, dlib/msproxy_clientprotocol.c)
AC_LINK_FILES(lib/config.c, dlib/config.c)
AC_LINK_FILES(lib/config_parse.y, dlib/config_parse.y)
AC_LINK_FILES(lib/config_scan.l, dlib/config_scan.l)
AC_LINK_FILES(lib/debug.c, dlib/debug.c)
AC_LINK_FILES(lib/io.c, dlib/io.c)
AC_LINK_FILES(lib/log.c, dlib/log.c)
AC_LINK_FILES(lib/method_uname.c, dlib/method_uname.c)
AC_LINK_FILES(lib/protocol.c, dlib/protocol.c)
AC_LINK_FILES(lib/socket.c, dlib/socket.c)
AC_LINK_FILES(lib/connectchild.c, dlib/connectchild.c)
AC_LINK_FILES(lib/udp.c, dlib/udp.c)
AC_LINK_FILES(lib/udp_util.c, dlib/udp_util.c)
AC_LINK_FILES(lib/userio.c, dlib/userio.c)
AC_LINK_FILES(lib/util.c, dlib/util.c)

AC_OUTPUT([sockd/Makefile include/Makefile lib/Makefile dlib/Makefile \
	   Makefile example/Makefile doc/Makefile bin/Makefile \
	   SPECS/Makefile SPECS/dante.spec bin/socksify \
	   libscompat/Makefile])
